/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false;  //是否为静态调用
}

PARSER_BEGIN(SQL)    //用于标记主程序段，注意SQL与文件名一致
					 //主程序段中的代码采用java格式，会原封不动的拷贝至SQL.java中
package sqlParse04;
import java.util.Vector;
import staticContent.*;
import dataBase.*;
public class SQL
{
  public static void main(String args []) throws ParseException	//函数入口
  {
    SQL parser = new SQL(System.in);		//从控制台输入字符串
    int j=0;
    Expression exp=new Expression();
    try
    { 
    	parser.subexpression(exp);
    	j=1;
    }
    catch (Exception e)
      {
//        System.out.println(e.getMessage());
      }

	 if(0==j)
	 {
		System.out.println("fail!");
 	 }
 	 else
 	 {
		System.out.println("success!"+exp.getElements().size());
		try
		{ 
			System.out.println("result="+StaticMethod.calExpression(exp.getElements()).getString());
//			for(int i=0;i<v.size();i++)
//				System.out.println(v.get(i).toString());
			
		}
		catch (Exception e)
      	{
        	System.out.println(e.getMessage());
      	}
 	 }
  }
}

PARSER_END(SQL) //主程序段结束

SKIP :			//需要跳过的字符，这里主要是跳过空格与换行符等
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < ADD : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < MOD : "%" >
| < GREAT : ">" >
| < LESS : "<" >
| < EQUAL : "==" >
| < AND : "and" >
| < OR : "or" >
| < NOT : "not" >
}
TOKEN : 
{
   < ICONSTANT : (< DIGIT >)+ >						 //整数
| < FCONSTANT : (< DIGIT >)+ "." (< DIGIT >)* >		 //小数
| < 	IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < SCONSTANT : "'" ([ "a"-"z", "\\", "%", "_" ])* "'" >	 //字符串
| < #LETTER : [ "a"-"z", "A"-"Z", "_" ] >
| < #DIGIT : [ "0"-"9" ] >
| < EOL :";" >
}

String GetNumericOperator() : //数学运算符
{
  Token t;
}
{
  (
    t = < ADD >
  | t = < MINUS >
  | t = < MULTIPLY >
  | t = < DIVIDE >
  | t = < MOD >
  )
  {
    return t.image;
  }
}

String GetLogicOperator() : //逻辑运算符
{
  Token t;
}
{
  (
    t = < GREAT >
  | t = < LESS >
  | t = < EQUAL >
  | t = < AND >
  | t = < OR >
  )
  {
    return t.image;
  }
}

void GetOperand(Expression exp) :
{
  Token t;
  Operand od = new Operand();
  Operand odm = new Operand();
  Variable var;
  Function f;
}
{
 
    [
      < MINUS >
      {
        odm.SetINT(-1);
        exp.addElement(odm);
        exp.addElement(Operator.get("*"));
      }
    ]
    (
	      
	    t = < ICONSTANT >
	    {
	      
	      od.SetINT(Integer.parseInt(t.image));
	      exp.addElement(od);
	    }
	  
		|
	  
	    t = < FCONSTANT >
	    {
	      od.SetFLOAT( Float.parseFloat(t.image));
	      exp.addElement(od);
	    }
	  
		|
	  
	    t = < SCONSTANT >
	    {
	      od.SetSTRING(t.image);
	      exp.addElement(od);
	    }
	    |LOOKAHEAD(2) f = GetFunction()  //识别函数
    	{
      		exp.addElement(f);
    	}
	  	|
	    t = < IDENTIFIER >  //识别变量
	    {
	      var=new Variable(t.image);
	      exp.addElement(var);
	    }
	)
	
	|
	(
	  	"(" {      exp.addElement(Operator.get("("));    }
			subexpression(exp)
		")"  {     exp.addElement(Operator.get(")"));    }
	)
	
		 
	
	 
	  
}

void OpPart(Expression  exp) :
{
  String opstr;
}
{
  (
    opstr = GetNumericOperator()
    {
      exp.addElement(Operator.get(opstr));
    }
  | opstr = GetLogicOperator()
    {
      exp.addElement(Operator.get(opstr));
    }
  )
  GetOperand(exp)
}

void subexpression(Expression exp) :
{
}
{
  GetOperand(exp)
  (
    LOOKAHEAD(2)
    OpPart(exp)
  )* 
}

void expression(Expression exp):
{
}
{
  GetOperand(exp)
  (
    LOOKAHEAD(2)
    OpPart(exp)
  )* < EOL >
}

Expression ParsePartExpression() :
{
  Expression exp = new Expression();
}
{
  subexpression(exp)
  {
    return exp;
  }
}

Function GetFunction() :
{
  Function f;
  Token t;
  Expression exp;
}
{

  t = < IDENTIFIER >
  {
    f = Function.get(t.image);
    f.SetName(t.image);
  }
  "(" 
  exp = ParsePartExpression()
  {
    f.AddParam(exp);
  }
  (
    "," exp = ParsePartExpression()
    {
      f.AddParam(exp);
    }
  )*
  ")"
  {
    return f;
  }
}